package com.dilokul.diltakip.service;

import com.dilokul.diltakip.exception.UserAlreadyExistsException;
import com.dilokul.diltakip.model.entity.Users;
import com.dilokul.diltakip.repository.UsersRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class UserAuthService implements UserDetailsService {

    private UsersRepository userRepository;

    public UserAuthService(UsersRepository usersRepository) {
        this.userRepository = usersRepository;
    }

    /**
     * Method name is loadUserByUsername which is autogenerated by JWT
     * but email is used instead of username so it is hardcoded for now.
     */
    @Override
    public UserDetails loadUserByUsername(String email) {

        Users userFromRepo = userRepository.findByEmail(email).get();
        List<GrantedAuthority> authorities = userFromRepo.getRoles().stream()
                .map(role -> new SimpleGrantedAuthority(role.getName().name()))
                .collect(Collectors.toList());
        return new org.springframework.security.core.userdetails.User(userFromRepo.getEmail(), userFromRepo.getPassword(), authorities);

    }

    public Users saveUser(Users user) throws UserAlreadyExistsException {

        if (userRepository.findByEmail(user.getEmail()).isPresent()) {
            throw new UserAlreadyExistsException("USER_EXISTS");
        }
        return userRepository.save(user);
    }
}